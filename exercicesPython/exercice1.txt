
Exercice 1 : Calculer la somme des chiffres d'un nombre

Rappel :

    Objectif : Écris une fonction somme_chiffres(n) qui retourne la somme des chiffres d'un entier positif n.

    Étapes :

        Convertis le nombre n en une chaîne de caractères avec str(n).

        Parcours chaque caractère de cette chaîne.

        Convertis chaque caractère en entier avec int() et additionne-les.

Pseudo-code :

def somme_chiffres(n):
    # Convertir en chaîne, extraire les chiffres et les additionner
    return sum(int(chiffre) for chiffre in str(n))

Exercice 2 : Trouver les nombres pairs dans une liste

Rappel :

    Objectif : Crée une fonction nombres_pairs(liste) qui retourne une nouvelle liste contenant uniquement les nombres pairs.

    Étapes :

        Utilise une compréhension de liste pour parcourir les éléments de la liste.

        Vérifie si chaque élément est pair avec l'opérateur modulo %.

        Ajoute à la nouvelle liste uniquement ceux qui remplissent la condition.

Pseudo-code :

def nombres_pairs(liste):
    # Filtrer les nombres pairs
    return [x for x in liste if x % 2 == 0]

Exercice 3 : Vérifier si une chaîne est un palindrome

Rappel :

    Objectif : Écris une fonction est_palindrome(chaine) qui vérifie si une chaîne est un palindrome.

    Étapes :

        Inverse la chaîne avec le découpage [::-1].

        Compare la chaîne originale avec sa version inversée.

        Retourne True si elles sont égales, sinon False.

Pseudo-code :

def est_palindrome(chaine):
    # Comparer la chaîne et son inverse
    return chaine == chaine[::-1]

Exercice 4 : Trouver la factorielle d'un nombre

Rappel :

    Objectif : Écris une fonction récursive factorielle(n) pour calculer la factorielle d’un entier positif n.

    Étapes :

        Définis la base de récursion : factorielle(0) = 1.

        Pour n > 0, calcule n×factorielle(n−1)n×factorielle(n−1).

Pseudo-code :

def factorielle(n):
    # Cas de base
    if n == 0:
        return 1
    # Cas récursif
    return n * factorielle(n - 1)

Exercice 5 : Trier un dictionnaire par ses valeurs

Rappel :

    Objectif : Écris une fonction trier_dictionnaire(d) qui trie un dictionnaire d par ses valeurs.

    Étapes :

        Utilise la fonction sorted() pour trier les items du dictionnaire.

        Passe l’argument key=lambda item: item[1] pour trier selon les valeurs.

        Retourne une liste triée des paires (clé, valeur).

Pseudo-code :

def trier_dictionnaire(d):
    # Trier par valeurs
    return sorted(d.items(), key=lambda item: item[1])
